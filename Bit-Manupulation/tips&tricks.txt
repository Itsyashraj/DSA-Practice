Note: Index or Position start from 0.

1. set ith bit of an integer num :
    num | (1 << i)
2. unset ith bit of an integer num :  
    num & ~(1 << i)
3. Toggle ith bit of an integer num :
    num ^ (1 << i)
4. 1's complement of an integer num :
    ~num
5. 2's complement of an integer num :
    1's complement(num) + 1 = -num = ~num + 1
6. unset/clear the lowest set bit of an integer num :
    num & (num-1) 
7. Getting the lowest set bit of an integer num
    num & (-num)
8. Getting the lowest set bit index of an integer num
    log2(num & -num) + 1
9. unset/clear all bits from LSB to ith position
      mask = ~((1 << i+1)-1);
      res = num & mask
10. unset/clear all bits from MSB to ith position
      mask = (1 << i+1) - 1;
      res = num & mask
11. Check even or Odd
      if(n & 1 == 0) => even 
12. swap two number
      a = a^b;
	  b = a^b;
	  a = a^b;
13. check is given integer num is power of two or not
    if(x & x-1) == 0 => power of two
14. 0xnum => consider num as hexadecimal number
	ex: 0x55 = 0101 0101

